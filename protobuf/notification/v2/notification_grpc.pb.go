// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NoticationServiceClient is the client API for NoticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoticationServiceClient interface {
	SendMessage(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (NoticationService_ClientStreamingClient, error)
	ServerStreaming(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (NoticationService_ServerStreamingClient, error)
	BidirectionStreaming(ctx context.Context, opts ...grpc.CallOption) (NoticationService_BidirectionStreamingClient, error)
}

type noticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoticationServiceClient(cc grpc.ClientConnInterface) NoticationServiceClient {
	return &noticationServiceClient{cc}
}

func (c *noticationServiceClient) SendMessage(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/demo.notication.v2.NoticationService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticationServiceClient) ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (NoticationService_ClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &NoticationService_ServiceDesc.Streams[0], "/demo.notication.v2.NoticationService/ClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &noticationServiceClientStreamingClient{stream}
	return x, nil
}

type NoticationService_ClientStreamingClient interface {
	Send(*ClientRequest) error
	CloseAndRecv() (*ServerResponse, error)
	grpc.ClientStream
}

type noticationServiceClientStreamingClient struct {
	grpc.ClientStream
}

func (x *noticationServiceClientStreamingClient) Send(m *ClientRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *noticationServiceClientStreamingClient) CloseAndRecv() (*ServerResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *noticationServiceClient) ServerStreaming(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (NoticationService_ServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &NoticationService_ServiceDesc.Streams[1], "/demo.notication.v2.NoticationService/ServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &noticationServiceServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NoticationService_ServerStreamingClient interface {
	Recv() (*ServerResponse, error)
	grpc.ClientStream
}

type noticationServiceServerStreamingClient struct {
	grpc.ClientStream
}

func (x *noticationServiceServerStreamingClient) Recv() (*ServerResponse, error) {
	m := new(ServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *noticationServiceClient) BidirectionStreaming(ctx context.Context, opts ...grpc.CallOption) (NoticationService_BidirectionStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &NoticationService_ServiceDesc.Streams[2], "/demo.notication.v2.NoticationService/BidirectionStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &noticationServiceBidirectionStreamingClient{stream}
	return x, nil
}

type NoticationService_BidirectionStreamingClient interface {
	Send(*ClientRequest) error
	Recv() (*ServerResponse, error)
	grpc.ClientStream
}

type noticationServiceBidirectionStreamingClient struct {
	grpc.ClientStream
}

func (x *noticationServiceBidirectionStreamingClient) Send(m *ClientRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *noticationServiceBidirectionStreamingClient) Recv() (*ServerResponse, error) {
	m := new(ServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NoticationServiceServer is the server API for NoticationService service.
// All implementations must embed UnimplementedNoticationServiceServer
// for forward compatibility
type NoticationServiceServer interface {
	SendMessage(context.Context, *ClientRequest) (*ServerResponse, error)
	ClientStreaming(NoticationService_ClientStreamingServer) error
	ServerStreaming(*ClientRequest, NoticationService_ServerStreamingServer) error
	BidirectionStreaming(NoticationService_BidirectionStreamingServer) error
	mustEmbedUnimplementedNoticationServiceServer()
}

// UnimplementedNoticationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNoticationServiceServer struct {
}

func (UnimplementedNoticationServiceServer) SendMessage(context.Context, *ClientRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedNoticationServiceServer) ClientStreaming(NoticationService_ClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreaming not implemented")
}
func (UnimplementedNoticationServiceServer) ServerStreaming(*ClientRequest, NoticationService_ServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreaming not implemented")
}
func (UnimplementedNoticationServiceServer) BidirectionStreaming(NoticationService_BidirectionStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionStreaming not implemented")
}
func (UnimplementedNoticationServiceServer) mustEmbedUnimplementedNoticationServiceServer() {}

// UnsafeNoticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoticationServiceServer will
// result in compilation errors.
type UnsafeNoticationServiceServer interface {
	mustEmbedUnimplementedNoticationServiceServer()
}

func RegisterNoticationServiceServer(s grpc.ServiceRegistrar, srv NoticationServiceServer) {
	s.RegisterService(&NoticationService_ServiceDesc, srv)
}

func _NoticationService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticationServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.notication.v2.NoticationService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticationServiceServer).SendMessage(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticationService_ClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NoticationServiceServer).ClientStreaming(&noticationServiceClientStreamingServer{stream})
}

type NoticationService_ClientStreamingServer interface {
	SendAndClose(*ServerResponse) error
	Recv() (*ClientRequest, error)
	grpc.ServerStream
}

type noticationServiceClientStreamingServer struct {
	grpc.ServerStream
}

func (x *noticationServiceClientStreamingServer) SendAndClose(m *ServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *noticationServiceClientStreamingServer) Recv() (*ClientRequest, error) {
	m := new(ClientRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NoticationService_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NoticationServiceServer).ServerStreaming(m, &noticationServiceServerStreamingServer{stream})
}

type NoticationService_ServerStreamingServer interface {
	Send(*ServerResponse) error
	grpc.ServerStream
}

type noticationServiceServerStreamingServer struct {
	grpc.ServerStream
}

func (x *noticationServiceServerStreamingServer) Send(m *ServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NoticationService_BidirectionStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NoticationServiceServer).BidirectionStreaming(&noticationServiceBidirectionStreamingServer{stream})
}

type NoticationService_BidirectionStreamingServer interface {
	Send(*ServerResponse) error
	Recv() (*ClientRequest, error)
	grpc.ServerStream
}

type noticationServiceBidirectionStreamingServer struct {
	grpc.ServerStream
}

func (x *noticationServiceBidirectionStreamingServer) Send(m *ServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *noticationServiceBidirectionStreamingServer) Recv() (*ClientRequest, error) {
	m := new(ClientRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NoticationService_ServiceDesc is the grpc.ServiceDesc for NoticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.notication.v2.NoticationService",
	HandlerType: (*NoticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _NoticationService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreaming",
			Handler:       _NoticationService_ClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreaming",
			Handler:       _NoticationService_ServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionStreaming",
			Handler:       _NoticationService_BidirectionStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "notification/v2/notification.proto",
}
